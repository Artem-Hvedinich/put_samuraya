{"version":3,"file":"static/js/855.8c2c3ac5.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/Status.tsx","assets/InputFile.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx"],"sourcesContent":["import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../redax/reduxStore\";\r\nimport {statusEditModeAction, updateUserStatus} from \"../../../redax/profileReducer\";\r\nimport styled from \"styled-components\";\r\nimport {NullableType} from \"../../../redax/authReducer\";\r\nimport {useFormik} from \"formik\";\r\n\r\nconst Input = styled.input`\r\n  width: 10vw;\r\n  height: 1.5vw;\r\n  font-size: 1vw;\r\n  background-color: rgba(255, 255, 255, 0.4);\r\n  border: none;`\r\n\r\nexport const Status = () => {\r\n    const status = useSelector<AppStoreType, NullableType<string>>(s => s.myPostPage.status)\r\n    const statusEditMode = useSelector<AppStoreType, NullableType<boolean>>(s => s.myPostPage.statusEditMode)\r\n\r\n    const dispatch = useDispatch()\r\n    // const [editMode, setEditMode] = useState(false)\r\n    const formik = useFormik({\r\n        initialValues: {statusValue: ''},\r\n        onSubmit: (values) => {\r\n            dispatch(updateUserStatus(values.statusValue))\r\n        }\r\n    })\r\n    const activateEditMode = () => {\r\n        dispatch(statusEditModeAction({statusEditMode: true}))\r\n    }\r\n\r\n\r\n    return (\r\n        statusEditMode ?\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Input autoFocus onChange={formik.handleChange}\r\n                       value={formik.values.statusValue ? formik.values.statusValue : ''}\r\n                       id=\"email\"\r\n                       name=\"statusValue\"\r\n                       type=\"text\"/>\r\n            </form>\r\n            : <p style={{backgroundColor:'rgba(77, 101, 91, 0.5)'}} onDoubleClick={activateEditMode}>{`My status: ${status}` || \"No status\"}</p>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InputFileWrapper = styled.label`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  font-size: 0.8vw;\r\n  background: rgba(77, 101, 91, 0.78);\r\n  border-radius: 0.3vw;\r\n  padding: 0.3vw;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: rgba(77, 101, 91);\r\n  }`\r\n\r\nexport const InputFile = ({children, value, onChange, disabled, accept}\r\n                              : { children?: string, value?: any, onChange?: (e: ChangeEvent<HTMLInputElement>) => void, disabled?: any, accept?: any }) => {\r\n    return (\r\n        <InputFileWrapper htmlFor=\"contained-button-file\">\r\n            <input\r\n                value={value}\r\n                accept={accept}\r\n                disabled={disabled}\r\n                style={{display: 'none'}}\r\n                id=\"contained-button-file\"\r\n                multiple\r\n                type=\"file\"\r\n                onChange={disabled ? () => {\r\n                } : onChange}\r\n            />\r\n            {children}\r\n        </InputFileWrapper>\r\n    );\r\n};","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ProfileType, saveProfile} from \"../../../redax/profileReducer\";\r\nimport {Button} from \"../../../assets/styledComponent/Button\";\r\nimport {FormikComponents} from \"../../../assets/FormikComponents\";\r\n\r\nconst InfoBlock = styled.div`\r\n  position: fixed;\r\n  width: 50vw;\r\n  background-color: rgba(255, 255, 255, 1);\r\n  box-shadow: 0 0 3px black;\r\n  border-radius: 5px;\r\n  padding: 1.5vw; `\r\nconst Error = styled.div`\r\n  color: red`\r\n\r\nexport const ProfileDataForm = ({profile}: { profile: ProfileType }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            ...profile,\r\n            contacts: {\r\n                github: '',\r\n                vk: '',\r\n                facebook: '',\r\n                instagram: '',\r\n                twitter: '',\r\n                website: '',\r\n                youtube: '',\r\n                mainLink: '',\r\n            }\r\n        },\r\n        validate: (values) => {\r\n            const errors = {} as ProfileType;\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Required';\r\n            } else if (values.fullName.length < 2) {\r\n                errors.fullName = 'Min length is 2 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(saveProfile(values, false))\r\n        }\r\n    })\r\n\r\n    return (\r\n        <InfoBlock>\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <FormikComponents widthComponent={'20'} componentType={'input'} id=\"fullName\" name=\"fullName\" inputType=\"text\"\r\n                                 onChange={formik.handleChange} value={formik.values.fullName}\r\n                                 text={'Full Name: '}/>\r\n                {formik.touched.fullName && formik.errors.fullName ? <Error>{formik.errors.fullName}</Error> : null}\r\n\r\n                <FormikComponents widthComponent={'20'} componentType={'input'} id=\"lookingForAJob\" name=\"lookingForAJob\"\r\n                                 inputType=\"checkbox\"\r\n                                 onChange={formik.handleChange} text={'Looking for a job:'}/>\r\n                <FormikComponents widthComponent={'20'} componentType={'textarea'} id=\"lookingForAJobDescription\"\r\n                                 name=\"lookingForAJobDescription\"\r\n                                 onChange={formik.handleChange} value={formik.values.lookingForAJobDescription}\r\n                                 text={'Job description:'}/>\r\n                Contact:\r\n                {profile.contacts && Object.keys(profile.contacts).map((key) => {\r\n                    console.log(`contacts.${key}`)\r\n                    return <div key={key}>\r\n                        <FormikComponents widthComponent={'20'} key={key} componentType={\"input\"} id={`contact.${key}`}\r\n                                         name={`contacts.${key}`} text={key} onChange={formik.handleChange}\r\n                        />\r\n                    </div>\r\n                })}\r\n\r\n                <FormikComponents widthComponent={'20'} componentType={'textarea'} id=\"aboutMe\" name=\"aboutMe\"\r\n                                 onChange={formik.handleChange} value={formik.values.aboutMe}\r\n                                 text={'About me:'}\r\n                />\r\n                <div style={{width: '100%', display: 'flex', justifyContent: 'center', paddingTop: '1vw'}}>\r\n                    <Button bgColor={'rgba(77, 101, 91, 0.78);'} width={4} height={1} type=\"submit\">Save</Button>\r\n                </div>\r\n            </form>\r\n        </InfoBlock>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport usersImg from \"../../../assets/images/users_images.png\"\r\nimport {Status} from \"./Status\";\r\nimport {editModeAction, ProfileType} from \"../../../redax/profileReducer\";\r\nimport styled from \"styled-components\";\r\nimport {NullableType} from \"../../../redax/authReducer\";\r\nimport {InputFile} from \"../../../assets/InputFile\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Button} from \"../../../assets/styledComponent/Button\";\r\n\r\nconst ProfileInfoWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 50vw; `\r\nconst AvatarWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 15vw;\r\n  min-height: 19vw;\r\n  background-color: rgba(255, 255, 255, 0.19);\r\n  box-shadow: 0 0 3px black;\r\n  border-radius: 5px;\r\n  padding: 1vw`\r\n\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  border-radius: 13px;`\r\n\r\nconst InfoBlock = styled.div`\r\n  width: 34vw;\r\n  background-color: rgba(255, 255, 255, 0.19);\r\n  box-shadow: 0 0 3px black;\r\n  border-radius: 5px;\r\n  padding: 1.5vw;`\r\n\r\nexport const ProfileInfo = ({profile, authId, savePhoto, editMode}\r\n                                : { profile: ProfileType, authId: NullableType<number>, savePhoto: (file: string | Blob) => void, editMode: boolean }) => {\r\n    const dispatch = useDispatch()\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const isOwner: boolean = authId === profile.userId\r\n\r\n    if (profile.userId) {\r\n        return (\r\n            <ProfileInfoWrapper>\r\n                <AvatarWrapper>\r\n                    <Img src={profile.photos?.large || usersImg}/>\r\n                    {isOwner &&\r\n                        <>\r\n                            <InputFile onChange={mainPhotoSelected}>Loading your photo</InputFile>\r\n                            <Button bgColor={'#4D655BFF'} width={13} height={1.5}\r\n                                    onClick={() => dispatch(editModeAction({editMode: true}))}>\r\n                                Edit profile</Button>\r\n                        </>}\r\n                </AvatarWrapper>\r\n\r\n                {editMode ? <ProfileDataForm profile={profile}/> :\r\n                    <ProfileData profile={profile}/>}\r\n            </ProfileInfoWrapper>\r\n        )\r\n    } else {\r\n        return <h1>Sorry, Error 404</h1>\r\n    }\r\n}\r\n\r\nconst ProfileData = ({profile}: { profile: ProfileType }) => {\r\n\r\n    return (\r\n        <InfoBlock>\r\n            <h1>{profile.fullName}</h1>\r\n            <Status/>\r\n            <p>{profile?.aboutMe}</p>\r\n            <p>Соц Сети:</p>\r\n\r\n            {/*Contact Block in profile*/}\r\n            {profile.contacts && Object.keys(profile.contacts).map((key) => {\r\n                return <span key={key}>\r\n                {profile.contacts[key] !== '' && profile.contacts[key] !== null &&\r\n                    <>\r\n                        <span>{key}: </span>\r\n                        <span>{profile.contacts && profile.contacts[key] && profile.contacts[key]}</span>\r\n                    </>\r\n                }</span>\r\n            })}\r\n\r\n            <p>Ищу ли я работу:{profile?.lookingForAJob ? ' Yes' : ' No'}</p>\r\n            {profile?.lookingForAJob && <p>Предпочтения в работе: {profile?.lookingForAJobDescription}</p>}\r\n        </InfoBlock>)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Post_container__gf5cm\",\"item\":\"Post_item__+6cNH\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nconst Post = ({message, likesCount, img}: { message: string, likesCount: number, img: string }) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <div>\r\n                <div className={s.item}>\r\n                    <img src={img} alt={'postImg'}/>\r\n                </div>\r\n                {message}\r\n            </div>\r\n            <div>\r\n                <span>Like</span>\r\n                {likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\n\r\nconst Text = styled(Field)`\r\n  width: 35vw;\r\n  height: 10vw;\r\n  resize: none;\r\n  font-size: 15px;\r\n`\r\n\r\ntype FromDataType = {\r\n    addNewPost: string\r\n}\r\n\r\nconst AddPost: React.FC<InjectedFormProps<FromDataType>> = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Text name='addNewPost' component={Textarea}\r\n                  placeholder='Enter You Comment'/>\r\n            <div>\r\n                {/*<button>Add post</button>*/}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddPostRedux = reduxForm<FromDataType>({form: 'addNewPost'})(AddPost)","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport {\r\n    addPost,\r\n    PostType,\r\n} from \"../../../redax/profileReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../redax/reduxStore\";\r\nimport styled from \"styled-components\";\r\nimport {AddPostRedux} from \"./AddPost\";\r\n\r\nconst PostsBlock = styled.div`\r\n  width: 50vw;\r\n  background-color: rgba(255, 255, 255, 0.19);\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 3px black;\r\n  margin-top: 1vw;\r\n  padding: 1vw;`\r\n\r\nexport const MyPosts = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const post = useSelector<AppStoreType, PostType[]>(s => s.myPostPage.posts)\r\n    const newPostText = (value: any) => {\r\n        dispatch(addPost({addNewPost:value.addNewPost}))\r\n    }\r\n\r\n    return (\r\n        <PostsBlock>\r\n            <div>\r\n                <h2>My post</h2>\r\n                <AddPostRedux onSubmit={newPostText}/>\r\n                <div>\r\n                    {post.map((p: PostType) => {\r\n                        return <Post key={p.id} message={p.message}\r\n                                     likesCount={p.likesCount} img={p.img}/>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </PostsBlock>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\nimport {getUserProfile, getUserStatus, ProfilePageType, savePhotoTC,} from \"../../redax/profileReducer\";\r\nimport {useDispatch, useSelector,} from \"react-redux\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {AppStoreType} from \"../../redax/reduxStore\";\r\nimport {PATH} from \"../RoutesWrapper/RoutersWrapper\";\r\nimport {NullableType} from \"../../redax/authReducer\";\r\n\r\nconst Profile = ({isAuth, authId}: { isAuth: boolean, authId: NullableType<number> }) => {\r\n    const myPostPage = useSelector<AppStoreType, ProfilePageType>(s => s.myPostPage)\r\n    const dispatch = useDispatch()\r\n    const {userId} = useParams<{ userId: string }>()\r\n\r\n    const savePhoto = useCallback((file: string | Blob) => dispatch(savePhotoTC(file)), [])\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            dispatch(getUserProfile(userId))\r\n            dispatch(getUserStatus(userId))\r\n        }\r\n    }, [userId, myPostPage.editMode])\r\n\r\n    if (!isAuth) return <Navigate to={PATH.Login}/>\r\n\r\n\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            <ProfileInfo profile={myPostPage.profile} editMode={myPostPage.editMode} authId={authId}\r\n                         savePhoto={savePhoto}/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile"],"names":["Input","styled","Status","status","useSelector","s","myPostPage","statusEditMode","dispatch","useDispatch","formik","useFormik","initialValues","statusValue","onSubmit","values","updateUserStatus","handleSubmit","autoFocus","onChange","handleChange","value","id","name","type","style","backgroundColor","onDoubleClick","statusEditModeAction","InputFileWrapper","InputFile","children","disabled","accept","htmlFor","display","multiple","InfoBlock","Error","ProfileDataForm","profile","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","validate","errors","fullName","length","saveProfile","FormikComponents","widthComponent","componentType","inputType","text","touched","lookingForAJobDescription","Object","keys","map","key","console","log","aboutMe","width","justifyContent","paddingTop","Button","bgColor","height","ProfileInfoWrapper","AvatarWrapper","Img","ProfileInfo","authId","savePhoto","editMode","isOwner","userId","src","photos","large","usersImg","e","target","files","onClick","editModeAction","ProfileData","lookingForAJob","message","likesCount","img","className","alt","Text","Field","AddPostRedux","reduxForm","form","props","component","Textarea","placeholder","PostsBlock","MyPosts","React","post","posts","addPost","addNewPost","p","isAuth","useParams","useCallback","file","savePhotoTC","useEffect","getUserProfile","getUserStatus","to","PATH"],"sourceRoot":""}